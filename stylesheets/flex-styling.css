/*
  This styles every element on the page to include padding and
  border measurements when calculating the widths and heights of
  elements.

  Normally, the actual width of element is calculated like so:
    actual width = width property + padding property + border property
  
  Now, because we set box-sizing to border box, the width of the whole element 
  is going to be the width that we state as part of the width property for an
  element.
    actual width = width property = content width + padding + border
*/
* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

/* This styles the nav to have no padding inside the navigation bar. */
nav {
  padding: 0;

  height: 10vh;
}

nav ul {
  /*
    This styles the navigation's unordereed list to be a flexbox container.
    Flexbox containers typically help with designing responsive web pages.
  */
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-box;
  display: -ms-flexbox;
  display: flex;

  /* 
    This allows our flex items to wrap to the next line when we run out of space 
    to display them.
  */
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;

  /* 
    This allows the flex container to display items vertically (column) as opposed to
    horizontally (row), which is the default.
  */
  /* -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -webkit-flex-direction: column;
  -moz-box-orient: vertical;
  -moz-box-direction: normal;
  -ms-flex-direction: column;
  flex-direction: column; */

  /*
    The justify-content property allows us to align items in the same direction
    that the flex container is displaying our items in.
    
    So, for a horizontal layout, it allows us to align items horizontally.
    For a vertical layout, it allows us to align items vertically.

    Values for justify-content include:
      flex-start - align the items to the start of the container
      flex-end - align the items to the end of the container
      center - aligns the items to the center of the container
      space-between - puts space between each item in the container, but does
                      not add space to the left of the first item or the right
                      of the last item.
      space-around - put space around each item in the container
  */
  -webkit-box-pack: space-around;
  -webkit-justify-content: space-around;
  -moz-box-pack: space-around;
  -ms-flex-pack: space-around;
  justify-content: space-around;

  /*
    The align-items property aligns the flex items in the opposite direction
    of how the flex container is laid out. So, if the flex container is set
    as a row, align-items will align the flex items in the vertical direction.
    If the flex container is set as a column, align-items will align the flex
    items in the horizontal direction.

    Values for align-items include:
      stretch (default) - This stretches the flex item to fill the entire
                          vertical space for the flex container.
      center - Centers the flex items vertically in the flex container.
      flex-start - Puts the flex items vertically at the start of the flex container.
      flex-end - Puts the flex items vertically at the end of the flex container.
      baseline - Aligns the flex items with the bottom of the text inside the flex
                  items.
  */
  -webkit-box-align: flex-start;
  -webkit-align-items: flex-start;
  -moz-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;

  /* 
    The align-content property aligns the rows or columns inside the flex
    container and affects how the flex items are wrapped inside the container.

    Values for align-content are: 
      stretch (default) - will make the rows or columns stretch to fill the
                          entire container.
      center - will make the rows or columns centered inside the flex container
      space-between - will add space between the rows or columns to make the rows 
                      fill the entire container.
      space-around - will add space around each of the rows or columns to fill the 
                      entire container.
      flex-start - will make the rows or columns stay at the beginning of the flex
                    container.
      flex-end - will make the rows or columns stay at the end of the flex container.
  */
  -webkit-align-content: flex-end;
  -ms-flex-line-pack: end;
  align-content: flex-end;

  height: 100%;
}

nav ul li {
  /*
    The flex-grow property sets how much flex items grow as the
    web page changes size.
  */
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -moz-box-flex: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;

  /*
    The flex-basis property sets the initial width of flex items
    inside the container. If the flex items are set to flex-grow: 1,
    it will ensure that your flex items never shrink below 300px.
  */
  -webkit-flex-basis: 300px;
  -ms-flex-preferred-size: 300px;
  flex-basis: 300px;

  /*
    flex is the shorthand for all three flex properties: flex-grow, flex-shrink
    and flex-basis.

    The following line could replace the styling we have above this comment.
  */
  /* -webkit-flex: 1 0 300px;
  -ms-flex: 1 0 300px;
  flex: 1 0 300px; */
}

nav ul li:first-of-type {
  /*
    Since this flex-grow property is set to 3 instead of 1,
    the first li in the nav's ul will grow 3 times as much
    as the other lis.
  */
  -webkit-box-flex: 3;
  -webkit-flex-grow: 3;
  -moz-box-flex: 3;
  -ms-flex-positive: 3;
  flex-grow: 3;
}

/* nav ul li:nth-of-type(4) { */
/*
    The flex-shrink property changes how much a flex item shrinks
    compared to all the other flex items.
  */
/* -webkit-flex-shrink: 2;
  -ms-flex-negative: 2;
  flex-shrink: 2; */
/* } */

/*
  This styles the anchors inside the navigation bar to fill the width and
  the height of the list items they are inside.
*/
nav ul li a {
  width: 100%;
  height: 100%;

  padding: 1vw;
}
